/*
 * @Author: chenq
 * @Date: 2020-11-18 16:45:01
 * @LastEditTime: 2020-11-18 16:49:02
 * @Descripttion: 复杂指针
 */
#include <iostream>
using namespace std;

//右左法则：
//从左起第一个未定义的标识符开始阅读，然后往右看，再往左看。每当遇到圆括号时，就应该调转阅读方向。
//一旦解析完圆括号里面的所有东西，就跳出圆括号。重复这个过程，直到整个声明解析完毕。


int main()
{
    int a;      //一个整数
    int *a;     //一个指针，指向一个整数
    int **a;    //一个指向指针的指针，它指向的指针指向的是一个整数

    int a[10];          //一个有10个整形数的数组
    int *a[10];         //一个有10个指针的数组，指针指向的是整形数，[]的优先级高于*，所以*修饰的是a[10]
    int (*a)[10];       //一个指向有10个整形数的指针
    int (*a)(int);      //一个指向函数的指针，该函数的形参跟返回值类型都是整形
    int(*a[10])(int);   //一个有10个指针的数组，指针指向的是函数，该函数的形参跟返回值类型都是整形

    int (*func)(int *p);    //一个指向函数的指针，该函数的形参类型是一个整形指针，返回值类型是一个整形
    int (*func)(int *p, int (*f)(int*));    //一个指向函数的指针，该函数的返回值类型为整形，该函数有两个形参，第一个形参类型是整形指针
                                            //第二个形参 int (*f)(int*) 是一个指向函数的指针，该函数的返回值类型是整形，参数类型是整形指针
    int (*func[5])(int *p);     //一个有5个指针的数组，指针指向的是函数，该函数的返回值是整形，参数是整形指针
    int (*(*func)[5])(int *p);  //一个指向数组的指针，数组的元素是函数指针，函数指针的返回值是整形，形参是整形指针
    int (*(*func)(int *p))[5];  //一个指向函数的指针，该函数的形参是整形指针，返回值是一个指向有5个整形数的指针，可以进行如下分解
                                // typedef  int (*PARA)[5];         函数的返回值：一个指针，指向5个整形数
                                // typedef PARA (*func)(int *);     定义函数：一个指向函数的指针，函数的形参是整形指针


    //错误实例
    //int func(void)[5];  //一个返回值为具有5个int元素的数组的函数。但C语言的函数返回值不能为数组，这是因为如果允许函数返回值为数组，
                        // 那么接收这个数组的内容的东西，也必须是一个数组，但C/C++语言的数组名是一个不可修改的左值，
                        // 它不能直接被另一个数组的内容修改，因此函数返回值不能为数组。
    //int func[5](void);  //func是一个具有5个元素的数组，这个数组的元素都是函数。这也是非法的，因为数组的元素必须是对象，
                        // 但函数不是对象，不能作为数组的元素。
}